// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sessions  Session[]
  progress  Progress[]
  activities Activity[]
  dashboardData DashboardData[]
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Progress {
  id          Int      @id @default(autoincrement())
  userId      Int
  taskType    String
  taskId      String
  status      ProgressStatus @default(IN_PROGRESS)
  percentage  Float    @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskType, taskId])
}

model Activity {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DashboardData {
  id        Int      @id @default(autoincrement())
  userId    Int
  dataType  String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, dataType])
}

model PromptChain {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  prompts     Json     // Array of prompt objects
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum ProgressStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}